// Generated by CoffeeScript 1.10.0
(function() {
  window.Phys = {};

  Phys.G = 6.67e-11;

  Phys.Celestial = function(xCoord, yCoord) {
    this.UUID = Util.UUID();
    this.xCoord = xCoord;
    this.yCoord = yCoord;
    this.velocity = new Util.Vector2(0, 0);
    this.mass = 5.972e24;
    this.radius = 6.371e6;
    this.distanceTo = function(object) {
      var distance, xDistance, yDistance;
      xDistance = this.xCoord - object.xCoord;
      yDistance = this.yCoord - object.yCoord;
      distance = Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));
      return distance;
    };
    this.gravityVectorTo = function(object) {
      var distance, gravity, gravityVector, theta, xDistance, yDistance;
      xDistance = this.xCoord - object.xCoord;
      yDistance = this.yCoord - object.yCoord;
      distance = this.distanceTo(object);
      gravity = (Phys.G * object.mass) / (Math.pow(distance, 2));
      theta = Math.atan2(yDistance, xDistance);
      gravityVector = new Util.Vector2(Math.cos(theta) * gravity, Math.sin(theta) * gravity);
      return gravityVector;
    };
    return this;
  };

  Phys.totalGravityVector = function(object, allObjects) {
    var gravities, otherObjects, totalGravity;
    otherObjects = allObjects.filter(function(obj) {
      return obj !== object;
    });
    gravities = otherObjects.map(function(otherObject) {
      return object.gravityVectorTo(otherObject);
    });
    totalGravity = gravities.reduce((function(totalVector, vector) {
      return totalVector.add(vector);
    }), new Util.Vector2(0, 0));
    return totalGravity;
  };

  Phys.checkCollisions = function(object, allObjects) {
    var collisions, otherObjects;
    otherObjects = allObjects.filter(function(obj) {
      return obj !== object;
    });
    collisions = otherObjects.filter(function(otherObject) {
      return object.distanceTo(otherObject) <= object.radius + otherObject.radius;
    });
    return collisions;
  };

}).call(this);
