// Generated by CoffeeScript 1.10.0
(function() {
  var G, Planet, Vector2, animate, clear, clicksRaw, combinedInput, draw, fps, framerate, init, planets, reset, resize, scale, sizeCanvas, tick, totalGravityVector;

  G = 6.67e-11;

  framerate = 60;

  scale = 250000;

  Vector2 = function(x, y) {
    this.X = x;
    this.Y = y;
    this.add = function(v) {
      return new Vector2(this.X + v.X, this.Y + v.Y);
    };
    this.scalar = function(s) {
      return new Vector2(this.X * s, this.Y * s);
    };
    return this;
  };

  Planet = function(x, y) {
    this.X = x;
    this.Y = y;
    this.V = new Vector2(0, 0);
    this.M = 5.972e24;
    this.R = 6.371e6;
    this.gVectorTo = function(p) {
      var g, gVector, r, theta;
      x = this.X - p.X;
      y = this.Y - p.Y;
      r = Math.sqrt(x * x + y * y);
      g = (G * p.M) / (r * r);
      theta = Math.atan2(y, x);
      gVector = new Vector2(Math.cos(theta) * g, Math.sin(theta) * g);
      return gVector;
    };
    return this;
  };

  fps = function(d) {
    return 1000 / d;
  };

  totalGravityVector = function(p, arr) {
    var ps, tgv, vs;
    ps = arr.filter(function(x) {
      return x !== p;
    });
    vs = ps.map(function(x) {
      return p.gVectorTo(x);
    });
    tgv = vs.reduce((function(a, v) {
      return a.add(v);
    }), new Vector2(0, 0));
    return tgv;
  };

  animate = function(p, arr) {
    p.V = p.V.add(totalGravityVector(p, arr).scalar(scale));
    p.X -= p.V.X / framerate;
    return p.Y -= p.V.Y / framerate;
  };

  sizeCanvas = function() {
    var canvas;
    canvas = $('#screen')[0];
    canvas.style.width = '100%';
    canvas.style.height = '95%';
    canvas.width = canvas.offsetWidth;
    return canvas.height = canvas.offsetHeight;
  };

  clear = function() {
    var canvas, ctx;
    canvas = $('#screen')[0];
    ctx = canvas.getContext('2d');
    return ctx.clearRect(0, 0, canvas.width, canvas.height);
  };

  draw = function(p) {
    var canvas, ctx;
    canvas = $('#screen')[0];
    ctx = canvas.getContext('2d');
    return ctx.drawImage($('#POL')[0], (p.X / scale) - (p.R / scale), (p.Y / scale) - (p.R / scale), (p.R / scale) * 2, (p.R / scale) * 2);
  };

  resize = $(window).asEventStream('resize');

  clicksRaw = $('#screen').asEventStream('click');

  reset = $('#reset').asEventStream('click').map('reset');

  combinedInput = clicksRaw.merge(reset);

  tick = Bacon.interval(fps(framerate));

  resize.onValue(sizeCanvas);

  init = [new Planet(200 * scale, 400 * scale), new Planet(200 * scale, 500 * scale)];

  init[0].V = new Vector2(-50 * scale, 0);

  init[1].M = 5.972e22;

  init[1].R = 3e6;

  init[1].V = new Vector2(10 * scale, 0);

  planets = combinedInput.scan(init, function(a, e) {
    if (e === 'reset') {
      return [];
    } else {
      return a.concat(new Planet(e.offsetX * scale, e.offsetY * scale));
    }
  });

  sizeCanvas();

  planets.sampledBy(tick).onValue(function(model) {
    var i, len, planet, results;
    clear();
    results = [];
    for (i = 0, len = model.length; i < len; i++) {
      planet = model[i];
      animate(planet, model);
      results.push(draw(planet));
    }
    return results;
  });

}).call(this);
