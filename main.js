// Generated by CoffeeScript 1.10.0
(function() {
  var clear, clicksRaw, draw, faster, fps, initState, input, isPaused, objs, pause, paused, reset, resize, scale, simSpeed, slower, speed, speedInput, update;

  fps = 60;

  paused = false;

  simSpeed = 50000;

  scale = 1350000;

  update = function(p, arr) {
    var A;
    A = Phys.totalGravityVector(p, arr).scalar(1 / fps).scalar(simSpeed);
    p.V = p.V.add(A);
    p.X -= (p.V.X / fps) * simSpeed;
    return p.Y -= (p.V.Y / fps) * simSpeed;
  };

  clear = function() {
    var canvas, ctx;
    canvas = $('#screen')[0];
    ctx = canvas.getContext('2d');
    return ctx.clearRect(0, 0, canvas.width, canvas.height);
  };

  draw = function(p) {
    var canvas, ctx;
    canvas = $('#screen')[0];
    ctx = canvas.getContext('2d');
    return ctx.drawImage($('#POL')[0], (p.X / scale) - (p.R / scale), (p.Y / scale) - (p.R / scale), (p.R / scale) * 2, (p.R / scale) * 2);
  };

  resize = $(window).asEventStream('resize');

  clicksRaw = $('#screen').asEventStream('click');

  reset = $('#reset').asEventStream('click').map('reset');

  pause = $('#pause').asEventStream('click');

  slower = $('#slower').asEventStream('click').map(1 / 2);

  faster = $('#faster').asEventStream('click').map(2);

  speedInput = slower.merge(faster);

  input = clicksRaw.merge(reset);

  resize.onValue(Util.sizeCanvas);

  initState = function() {
    var s;
    s = [new Phys.Celestial(600 * scale, 275 * scale), new Phys.Celestial(600 * scale, (275 * scale) + 3.844e8)];
    s[0].V = new Util.Vector2(-12.325, 0);
    s[1].M = 7.35e22;
    s[1].R = 1.75e6;
    s[1].V = new Util.Vector2(1000, 0);
    return s;
  };

  objs = input.scan(initState(), function(a, e) {
    if (e === 'reset') {
      return initState();
    } else {
      return a.concat(new Phys.Celestial(e.offsetX * scale, e.offsetY * scale));
    }
  });

  isPaused = pause.map(1).scan(1, function(a, v) {
    return a + v;
  }).map(function(x) {
    return x % 2 === 0;
  });

  isPaused.onValue(function(newPaused) {
    return paused = newPaused;
  });

  isPaused.map(function(x) {
    if (x) {
      return "Play";
    } else {
      return "Pause";
    }
  }).assign($('#pause'), 'text');

  speed = speedInput.scan(simSpeed, function(a, e) {
    return Math.round(a * e);
  });

  speed.onValue(function(newSpeed) {
    return simSpeed = newSpeed;
  });

  speed.assign($('#speed'), 'text');

  Util.sizeCanvas();

  objs.sample(Util.ticksToMilliseconds(fps)).onValue(function(model) {
    var i, len, planet, results;
    clear();
    results = [];
    for (i = 0, len = model.length; i < len; i++) {
      planet = model[i];
      console.log(Phys.checkCollisions(planet, model));
      if (!paused) {
        update(planet, model);
      }
      results.push(draw(planet));
    }
    return results;
  });

}).call(this);
